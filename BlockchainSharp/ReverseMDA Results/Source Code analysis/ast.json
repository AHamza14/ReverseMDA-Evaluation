[
  {
    "name": "SimpleCompiler",
    "type": "class",
    "namespace": "BlockchainSharp.Compilers",
    "bases": [],
    "attributes": [
      [
        "compiler",
        "BytecodeCompiler"
      ],
      [
        "lines",
        "string[]"
      ],
      [
        "nlines",
        "int"
      ],
      [
        "cline",
        "int"
      ]
    ],
    "operations": [
      [
        "Compile",
        "byte[]",
        []
      ],
      [
        "ProcessLine",
        "void",
        [
          [
            "line",
            "string"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "BytecodeCompiler",
        "association",
        "1",
        "1"
      ],
      [
        "string[]",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "AccountsState",
    "type": "class",
    "namespace": "BlockchainSharp.Core",
    "bases": [],
    "attributes": [
      [
        "encoder",
        "AccountStateEncoder"
      ],
      [
        "defaultValue",
        "AccountState"
      ],
      [
        "states",
        "Trie"
      ]
    ],
    "operations": [
      [
        "Put",
        "AccountsState",
        [
          [
            "address",
            "Address"
          ],
          [
            "state",
            "AccountState"
          ]
        ]
      ],
      [
        "Get",
        "AccountState",
        [
          [
            "address",
            "Address"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "AccountStateEncoder",
        "association",
        "1",
        "1"
      ],
      [
        "AccountState",
        "association",
        "1",
        "1"
      ],
      [
        "Trie",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "AccountState",
    "type": "class",
    "namespace": "BlockchainSharp.Core",
    "bases": [],
    "attributes": [
      [
        "balance",
        "BigInteger",
        "property"
      ],
      [
        "nonce",
        "ulong",
        "property"
      ]
    ],
    "operations": [
      [
        "AddToBalance",
        "AccountState",
        [
          [
            "amount",
            "BigInteger"
          ]
        ]
      ],
      [
        "SubtractFromBalance",
        "AccountState",
        [
          [
            "amount",
            "BigInteger"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "BigInteger",
        "association",
        "1",
        "1"
      ],
      [
        "BigInteger",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "Block",
    "type": "class",
    "namespace": "BlockchainSharp.Core",
    "bases": [],
    "attributes": [
      [
        "emptyTxs",
        "Transaction[]"
      ],
      [
        "transactionEncoder",
        "TransactionEncoder"
      ],
      [
        "header",
        "BlockHeader"
      ],
      [
        "transactions",
        "IList<Transaction>",
        "property"
      ],
      [
        "number",
        "ulong",
        "property"
      ],
      [
        "hash",
        "BlockHash",
        "property"
      ],
      [
        "parenthash",
        "BlockHash",
        "property"
      ],
      [
        "isgenesis",
        "bool",
        "property"
      ]
    ],
    "operations": [
      [
        "HasParent",
        "bool",
        [
          [
            "parent",
            "Block"
          ]
        ]
      ],
      [
        "CalculateHash",
        "Hash",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "Transaction[]",
        "association",
        "1",
        "1"
      ],
      [
        "TransactionEncoder",
        "association",
        "1",
        "1"
      ],
      [
        "BlockHeader",
        "association",
        "1",
        "1"
      ],
      [
        "IList<Transaction>",
        "association",
        "1",
        "1"
      ],
      [
        "IList<Transaction>",
        "association",
        "1",
        "1"
      ],
      [
        "BlockHash",
        "association",
        "1",
        "1"
      ],
      [
        "BlockHash",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "BlockChain",
    "type": "class",
    "namespace": "BlockchainSharp.Core",
    "bases": [],
    "attributes": [
      [
        "blockStore",
        "IBlockStore"
      ],
      [
        "bestBlock",
        "Block",
        "property"
      ],
      [
        "bestblocknumber",
        "ulong",
        "property"
      ]
    ],
    "operations": [
      [
        "TryToAdd",
        "bool",
        [
          [
            "block",
            "Block"
          ]
        ]
      ],
      [
        "HasBlock",
        "bool",
        [
          [
            "hash",
            "BlockHash"
          ]
        ]
      ],
      [
        "GetBlock",
        "Block",
        [
          [
            "n",
            "ulong"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "IBlockStore",
        "association",
        "1",
        "1"
      ],
      [
        "Block",
        "association",
        "1",
        "1"
      ],
      [
        "Block",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "BlockExecutor",
    "type": "class",
    "namespace": "BlockchainSharp.Core",
    "bases": [],
    "attributes": [],
    "operations": [
      [
        "ExecuteBlock",
        "AccountsState",
        [
          [
            "block",
            "Block"
          ],
          [
            "initialstate",
            "AccountsState"
          ]
        ]
      ],
      [
        "ExecuteTransaction",
        "bool",
        [
          [
            "transaction",
            "Transaction"
          ],
          [
            "initialstate",
            "AccountsState"
          ],
          [
            "newstate",
            "AccountsState"
          ]
        ]
      ]
    ],
    "relationships": []
  },
  {
    "name": "BlockHeader",
    "type": "class",
    "namespace": "BlockchainSharp.Core",
    "bases": [],
    "attributes": [
      [
        "number",
        "ulong",
        "property"
      ],
      [
        "parentHash",
        "BlockHash",
        "property"
      ],
      [
        "transactionsHash",
        "Hash",
        "property"
      ],
      [
        "hash",
        "BlockHash",
        "property"
      ]
    ],
    "operations": [],
    "relationships": [
      [
        "BlockHash",
        "association",
        "1",
        "1"
      ],
      [
        "Hash",
        "association",
        "1",
        "1"
      ],
      [
        "BlockHash",
        "association",
        "1",
        "1"
      ],
      [
        "BlockHash",
        "association",
        "1",
        "1"
      ],
      [
        "Hash",
        "association",
        "1",
        "1"
      ],
      [
        "BlockHash",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "BlockInfo",
    "type": "class",
    "namespace": "BlockchainSharp.Core",
    "bases": [],
    "attributes": [
      [
        "block",
        "Block",
        "property"
      ],
      [
        "state",
        "AccountsState",
        "property"
      ]
    ],
    "operations": [],
    "relationships": [
      [
        "Block",
        "association",
        "1",
        "1"
      ],
      [
        "AccountsState",
        "association",
        "1",
        "1"
      ],
      [
        "Block",
        "association",
        "1",
        "1"
      ],
      [
        "AccountsState",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "Status",
    "type": "class",
    "namespace": "BlockchainSharp.Core",
    "bases": [],
    "attributes": [
      [
        "height",
        "ulong",
        "property"
      ],
      [
        "hash",
        "BlockHash",
        "property"
      ]
    ],
    "operations": [],
    "relationships": [
      [
        "BlockHash",
        "association",
        "1",
        "1"
      ],
      [
        "BlockHash",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "Transaction",
    "type": "class",
    "namespace": "BlockchainSharp.Core",
    "bases": [],
    "attributes": [
      [
        "sender",
        "Address",
        "property"
      ],
      [
        "receiver",
        "Address",
        "property"
      ],
      [
        "value",
        "BigInteger",
        "property"
      ],
      [
        "hash",
        "Hash",
        "property"
      ]
    ],
    "operations": [
      [
        "CalculateHash",
        "Hash",
        []
      ]
    ],
    "relationships": [
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "BigInteger",
        "association",
        "1",
        "1"
      ],
      [
        "Hash",
        "association",
        "1",
        "1"
      ],
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "BigInteger",
        "association",
        "1",
        "1"
      ],
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "Hash",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "Address",
    "type": "class",
    "namespace": "BlockchainSharp.Core.Types",
    "bases": [],
    "attributes": [
      [
        "random",
        "Random"
      ],
      [
        "bytes",
        "byte[]",
        "property"
      ]
    ],
    "operations": [
      [
        "Equals",
        "bool",
        [
          [
            "obj",
            "object"
          ]
        ]
      ],
      [
        "GetHashCode",
        "int",
        []
      ],
      [
        "ToString",
        "string",
        []
      ],
      [
        "ByteArrayToString",
        "string",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "Random",
        "association",
        "1",
        "1"
      ],
      [
        "byte[]",
        "association",
        "1",
        "1"
      ],
      [
        "byte[]",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "BlockHash",
    "type": "class",
    "namespace": "BlockchainSharp.Core.Types",
    "bases": [
      "Hash"
    ],
    "attributes": [],
    "operations": [
      [
        "Calculate",
        "BlockHash",
        [
          [
            "header",
            "BlockHeader"
          ]
        ]
      ],
      [
        "CalculateHash",
        "byte[]",
        [
          [
            "header",
            "BlockHeader"
          ]
        ]
      ]
    ],
    "relationships": []
  },
  {
    "name": "Hash",
    "type": "class",
    "namespace": "BlockchainSharp.Core.Types",
    "bases": [],
    "attributes": [
      [
        "random",
        "Random"
      ],
      [
        "bytes",
        "byte[]",
        "property"
      ]
    ],
    "operations": [
      [
        "Equals",
        "bool",
        [
          [
            "obj",
            "object"
          ]
        ]
      ],
      [
        "GetHashCode",
        "int",
        []
      ]
    ],
    "relationships": [
      [
        "Random",
        "association",
        "1",
        "1"
      ],
      [
        "byte[]",
        "association",
        "1",
        "1"
      ],
      [
        "byte[]",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "AccountStateEncoder",
    "type": "class",
    "namespace": "BlockchainSharp.Encoding",
    "bases": [],
    "attributes": [],
    "operations": [
      [
        "Encode",
        "byte[]",
        [
          [
            "state",
            "AccountState"
          ]
        ]
      ],
      [
        "Decode",
        "AccountState",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ]
    ],
    "relationships": []
  },
  {
    "name": "AddressEncoder",
    "type": "class",
    "namespace": "BlockchainSharp.Encoding",
    "bases": [],
    "attributes": [
      [
        "instance",
        "AddressEncoder",
        "property"
      ]
    ],
    "operations": [
      [
        "Encode",
        "byte[]",
        [
          [
            "address",
            "Address"
          ]
        ]
      ],
      [
        "Decode",
        "Address",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "AddressEncoder",
        "association",
        "1",
        "1"
      ],
      [
        "AddressEncoder",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "BigIntegerEncoder",
    "type": "class",
    "namespace": "BlockchainSharp.Encoding",
    "bases": [],
    "attributes": [
      [
        "instance",
        "BigIntegerEncoder",
        "property"
      ]
    ],
    "operations": [
      [
        "Encode",
        "byte[]",
        [
          [
            "value",
            "BigInteger"
          ]
        ]
      ],
      [
        "Decode",
        "BigInteger",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "BigIntegerEncoder",
        "association",
        "1",
        "1"
      ],
      [
        "BigIntegerEncoder",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "BlockEncoder",
    "type": "class",
    "namespace": "BlockchainSharp.Encoding",
    "bases": [],
    "attributes": [
      [
        "bigIntegerEncoder",
        "BigIntegerEncoder"
      ],
      [
        "hashEncoder",
        "HashEncoder"
      ],
      [
        "instance",
        "BlockEncoder",
        "property"
      ]
    ],
    "operations": [
      [
        "Encode",
        "byte[]",
        [
          [
            "block",
            "Block"
          ]
        ]
      ],
      [
        "Decode",
        "Block",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "BigIntegerEncoder",
        "association",
        "1",
        "1"
      ],
      [
        "HashEncoder",
        "association",
        "1",
        "1"
      ],
      [
        "BlockEncoder",
        "association",
        "1",
        "1"
      ],
      [
        "BlockEncoder",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "BlockHeaderEncoder",
    "type": "class",
    "namespace": "BlockchainSharp.Encoding",
    "bases": [],
    "attributes": [
      [
        "bigIntegerEncoder",
        "BigIntegerEncoder"
      ],
      [
        "hashEncoder",
        "HashEncoder"
      ],
      [
        "instance",
        "BlockHeaderEncoder",
        "property"
      ]
    ],
    "operations": [
      [
        "Encode",
        "byte[]",
        [
          [
            "header",
            "BlockHeader"
          ]
        ]
      ],
      [
        "Decode",
        "BlockHeader",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "BigIntegerEncoder",
        "association",
        "1",
        "1"
      ],
      [
        "HashEncoder",
        "association",
        "1",
        "1"
      ],
      [
        "BlockHeaderEncoder",
        "association",
        "1",
        "1"
      ],
      [
        "BlockHeaderEncoder",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "HashEncoder",
    "type": "class",
    "namespace": "BlockchainSharp.Encoding",
    "bases": [],
    "attributes": [],
    "operations": [
      [
        "Encode",
        "byte[]",
        [
          [
            "hash",
            "Hash"
          ]
        ]
      ],
      [
        "Decode",
        "Hash",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ],
      [
        "DecodeBlockHash",
        "BlockHash",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ]
    ],
    "relationships": []
  },
  {
    "name": "Rlp",
    "type": "class",
    "namespace": "BlockchainSharp.Encoding",
    "bases": [],
    "attributes": [
      [
        "SizeLarge",
        "int"
      ],
      [
        "SizeMedium",
        "int"
      ],
      [
        "SizeSmall",
        "int"
      ],
      [
        "emptyarray",
        "byte[]"
      ],
      [
        "empty",
        "byte[]"
      ]
    ],
    "operations": [
      [
        "Decode",
        "byte[]",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ],
      [
        "Encode",
        "byte[]",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ],
      [
        "DecodeList",
        "IList<byte[]>",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ],
      [
        "EncodeList",
        "byte[]",
        [
          [
            "bytes",
            "byte[][]"
          ]
        ]
      ],
      [
        "GetOffset",
        "int",
        [
          [
            "bytes",
            "byte[]"
          ],
          [
            "position",
            "int"
          ]
        ]
      ],
      [
        "GetLength",
        "int",
        [
          [
            "bytes",
            "byte[]"
          ],
          [
            "position",
            "int"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "byte[]",
        "association",
        "1",
        "1"
      ],
      [
        "byte[]",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "TransactionEncoder",
    "type": "class",
    "namespace": "BlockchainSharp.Encoding",
    "bases": [],
    "attributes": [
      [
        "instance",
        "TransactionEncoder",
        "property"
      ],
      [
        "addressEncoder",
        "AddressEncoder"
      ]
    ],
    "operations": [
      [
        "Encode",
        "byte[]",
        [
          [
            "tx",
            "Transaction"
          ]
        ]
      ],
      [
        "Encode",
        "byte[]",
        [
          [
            "txs",
            "IList<Transaction>"
          ]
        ]
      ],
      [
        "Decode",
        "Transaction",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "TransactionEncoder",
        "association",
        "1",
        "1"
      ],
      [
        "AddressEncoder",
        "association",
        "1",
        "1"
      ],
      [
        "TransactionEncoder",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "UnsignedLongEncoder",
    "type": "class",
    "namespace": "BlockchainSharp.Encoding",
    "bases": [],
    "attributes": [
      [
        "instance",
        "UnsignedLongEncoder",
        "property"
      ]
    ],
    "operations": [
      [
        "Encode",
        "byte[]",
        [
          [
            "value",
            "ulong"
          ]
        ]
      ],
      [
        "Decode",
        "ulong",
        [
          [
            "bytes",
            "byte[]"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "UnsignedLongEncoder",
        "association",
        "1",
        "1"
      ],
      [
        "UnsignedLongEncoder",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "BlockMessage",
    "type": "class",
    "namespace": "BlockchainSharp.Net.Messages",
    "bases": [
      "Message"
    ],
    "attributes": [
      [
        "block",
        "Block",
        "property"
      ]
    ],
    "operations": [],
    "relationships": [
      [
        "Block",
        "association",
        "1",
        "1"
      ],
      [
        "Block",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "Message",
    "type": "class",
    "namespace": "BlockchainSharp.Net.Messages",
    "bases": [],
    "attributes": [
      [
        "type",
        "MessageType"
      ],
      [
        "messagetype",
        "MessageType",
        "property"
      ]
    ],
    "operations": [],
    "relationships": [
      [
        "MessageType",
        "association",
        "1",
        "1"
      ],
      [
        "MessageType",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "MessageType",
    "type": "enum",
    "namespace": "BlockchainSharp.Net.Messages",
    "bases": [],
    "attributes": [
      [
        "BlockMessage",
        "default"
      ],
      [
        "TransactionMessage",
        "default"
      ],
      [
        "StatusMessage",
        "default"
      ]
    ],
    "operations": [],
    "relationships": []
  },
  {
    "name": "StatusMessage",
    "type": "class",
    "namespace": "BlockchainSharp.Net.Messages",
    "bases": [
      "Message"
    ],
    "attributes": [
      [
        "status",
        "Status",
        "property"
      ]
    ],
    "operations": [],
    "relationships": [
      [
        "Status",
        "association",
        "1",
        "1"
      ],
      [
        "Status",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "TransactionMessage",
    "type": "class",
    "namespace": "BlockchainSharp.Net.Messages",
    "bases": [
      "Message"
    ],
    "attributes": [
      [
        "transaction",
        "Transaction",
        "property"
      ]
    ],
    "operations": [],
    "relationships": [
      [
        "Transaction",
        "association",
        "1",
        "1"
      ],
      [
        "Transaction",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "BlockProcess",
    "type": "enum",
    "namespace": "BlockchainSharp.Processors",
    "bases": [],
    "attributes": [
      [
        "Imported",
        "default"
      ],
      [
        "NotImported",
        "default"
      ],
      [
        "Known",
        "default"
      ],
      [
        "MissingAncestor",
        "default"
      ]
    ],
    "operations": [],
    "relationships": []
  },
  {
    "name": "BlockProcessor",
    "type": "class",
    "namespace": "BlockchainSharp.Processors",
    "bases": [],
    "attributes": [
      [
        "chain",
        "BlockChain"
      ],
      [
        "orphansStore",
        "IBlockStore"
      ],
      [
        "blockchain",
        "BlockChain",
        "property"
      ]
    ],
    "operations": [
      [
        "ProcessBlock",
        "BlockProcess",
        [
          [
            "block",
            "Block"
          ]
        ]
      ],
      [
        "TryConnectChildren",
        "void",
        [
          [
            "block",
            "Block"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "BlockChain",
        "association",
        "1",
        "1"
      ],
      [
        "IBlockStore",
        "association",
        "1",
        "1"
      ],
      [
        "BlockChain",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "MessageProcessor",
    "type": "class",
    "namespace": "BlockchainSharp.Processors",
    "bases": [],
    "attributes": [
      [
        "blockProcessor",
        "BlockProcessor"
      ],
      [
        "transactionProcessor",
        "TransactionProcessor"
      ]
    ],
    "operations": [
      [
        "ProcessMessage",
        "void",
        [
          [
            "message",
            "Message"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "BlockProcessor",
        "association",
        "1",
        "1"
      ],
      [
        "TransactionProcessor",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "MinerProcessor",
    "type": "class",
    "namespace": "BlockchainSharp.Processors",
    "bases": [],
    "attributes": [
      [
        "transactionPool",
        "TransactionPool"
      ]
    ],
    "operations": [
      [
        "MineBlock",
        "Block",
        [
          [
            "parent",
            "Block"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "TransactionPool",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "TransactionProcess",
    "type": "enum",
    "namespace": "BlockchainSharp.Processors",
    "bases": [],
    "attributes": [
      [
        "Added",
        "default"
      ],
      [
        "Known",
        "default"
      ]
    ],
    "operations": [],
    "relationships": []
  },
  {
    "name": "TransactionProcessor",
    "type": "class",
    "namespace": "BlockchainSharp.Processors",
    "bases": [],
    "attributes": [
      [
        "transactionPool",
        "TransactionPool"
      ]
    ],
    "operations": [
      [
        "ProcessTransaction",
        "TransactionProcess",
        [
          [
            "transaction",
            "Transaction"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "TransactionPool",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "IBlockStore",
    "type": "interface",
    "namespace": "BlockchainSharp.Stores",
    "bases": [],
    "attributes": [],
    "operations": [
      [
        "GetByBlockHash",
        "Block",
        [
          [
            "hash",
            "BlockHash"
          ]
        ]
      ],
      [
        "GetByNumber",
        "IEnumerable<Block>",
        [
          [
            "number",
            "ulong"
          ]
        ]
      ],
      [
        "GetByParentHash",
        "IEnumerable<Block>",
        [
          [
            "hash",
            "BlockHash"
          ]
        ]
      ],
      [
        "Save",
        "void",
        [
          [
            "block",
            "Block"
          ]
        ]
      ],
      [
        "Remove",
        "void",
        [
          [
            "hash",
            "BlockHash"
          ]
        ]
      ]
    ],
    "relationships": []
  },
  {
    "name": "InMemoryBlockStore",
    "type": "class",
    "namespace": "BlockchainSharp.Stores",
    "bases": [
      "IBlockStore"
    ],
    "attributes": [
      [
        "blocks",
        "IDictionary<BlockHash, Block>"
      ],
      [
        "blocksbynumber",
        "IDictionary<ulong, IList<Block>>"
      ],
      [
        "blocksbyparenthash",
        "IDictionary<BlockHash, IList<Block>>"
      ]
    ],
    "operations": [
      [
        "GetByBlockHash",
        "Block",
        [
          [
            "hash",
            "BlockHash"
          ]
        ]
      ],
      [
        "GetByNumber",
        "IEnumerable<Block>",
        [
          [
            "number",
            "ulong"
          ]
        ]
      ],
      [
        "GetByParentHash",
        "IEnumerable<Block>",
        [
          [
            "hash",
            "BlockHash"
          ]
        ]
      ],
      [
        "Save",
        "void",
        [
          [
            "block",
            "Block"
          ]
        ]
      ],
      [
        "Remove",
        "void",
        [
          [
            "key",
            "BlockHash"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "IDictionary<BlockHash, Block>",
        "association",
        "1",
        "1"
      ],
      [
        "IDictionary<ulong, IList<Block>>",
        "association",
        "1",
        "1"
      ],
      [
        "IDictionary<BlockHash, IList<Block>>",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "TransactionPool",
    "type": "class",
    "namespace": "BlockchainSharp.Stores",
    "bases": [],
    "attributes": [
      [
        "transactions",
        "ISet<Transaction>",
        "property"
      ]
    ],
    "operations": [
      [
        "AddTransaction",
        "void",
        [
          [
            "transaction",
            "Transaction"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "ISet<Transaction>",
        "association",
        "1",
        "1"
      ],
      [
        "ISet<Transaction>",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "Trie",
    "type": "class",
    "namespace": "BlockchainSharp.Tries",
    "bases": [],
    "attributes": [
      [
        "empty",
        "Trie"
      ],
      [
        "leafs",
        "Trie[]"
      ],
      [
        "value",
        "byte[]"
      ]
    ],
    "operations": [
      [
        "IsEmpty",
        "bool",
        []
      ],
      [
        "Put",
        "Trie",
        [
          [
            "key",
            "byte[]"
          ],
          [
            "value",
            "byte[]"
          ]
        ]
      ],
      [
        "Get",
        "byte[]",
        [
          [
            "key",
            "byte[]"
          ]
        ]
      ],
      [
        "Remove",
        "Trie",
        [
          [
            "key",
            "byte[]"
          ]
        ]
      ],
      [
        "EmptyLeafs",
        "bool",
        [
          [
            "leafs",
            "Trie[]"
          ]
        ]
      ],
      [
        "ToNibbles",
        "byte[]",
        [
          [
            "key",
            "byte[]"
          ]
        ]
      ],
      [
        "Get",
        "byte[]",
        [
          [
            "key",
            "byte[]"
          ],
          [
            "position",
            "int"
          ]
        ]
      ],
      [
        "Put",
        "Trie",
        [
          [
            "key",
            "byte[]"
          ],
          [
            "position",
            "int"
          ],
          [
            "value",
            "byte[]"
          ]
        ]
      ],
      [
        "PutAtNewLeaf",
        "Trie",
        [
          [
            "key",
            "byte[]"
          ],
          [
            "position",
            "int"
          ],
          [
            "value",
            "byte[]"
          ],
          [
            "offset",
            "int"
          ]
        ]
      ],
      [
        "ChangeValue",
        "Trie",
        [
          [
            "newvalue",
            "byte[]"
          ]
        ]
      ],
      [
        "SameValue",
        "bool",
        [
          [
            "newvalue",
            "byte[]"
          ]
        ]
      ],
      [
        "CloneLeafs",
        "Trie[]",
        []
      ],
      [
        "ChangeLeaf",
        "Trie[]",
        [
          [
            "offset",
            "int"
          ],
          [
            "newleaf",
            "Trie"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "Trie",
        "association",
        "1",
        "1"
      ],
      [
        "Trie[]",
        "association",
        "1",
        "1"
      ],
      [
        "byte[]",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "BytecodeCompiler",
    "type": "class",
    "namespace": "BlockchainSharp.Vm",
    "bases": [],
    "attributes": [
      [
        "bytes",
        "IList<byte>"
      ]
    ],
    "operations": [
      [
        "Stop",
        "void",
        []
      ],
      [
        "Add",
        "void",
        []
      ],
      [
        "Subtract",
        "void",
        []
      ],
      [
        "Multiply",
        "void",
        []
      ],
      [
        "Divide",
        "void",
        []
      ],
      [
        "LessThan",
        "void",
        []
      ],
      [
        "GreaterThan",
        "void",
        []
      ],
      [
        "Equal",
        "void",
        []
      ],
      [
        "IsZero",
        "void",
        []
      ],
      [
        "And",
        "void",
        []
      ],
      [
        "Or",
        "void",
        []
      ],
      [
        "Not",
        "void",
        []
      ],
      [
        "Xor",
        "void",
        []
      ],
      [
        "Address",
        "void",
        []
      ],
      [
        "Origin",
        "void",
        []
      ],
      [
        "Caller",
        "void",
        []
      ],
      [
        "Coinbase",
        "void",
        []
      ],
      [
        "Pop",
        "void",
        []
      ],
      [
        "MLoad",
        "void",
        []
      ],
      [
        "MStore",
        "void",
        []
      ],
      [
        "MStore8",
        "void",
        []
      ],
      [
        "SLoad",
        "void",
        []
      ],
      [
        "SStore",
        "void",
        []
      ],
      [
        "Jump",
        "void",
        []
      ],
      [
        "JumpI",
        "void",
        []
      ],
      [
        "JumpDest",
        "void",
        []
      ],
      [
        "Pc",
        "void",
        []
      ],
      [
        "Push",
        "void",
        [
          [
            "value",
            "int"
          ]
        ]
      ],
      [
        "Push",
        "void",
        [
          [
            "dw",
            "DataWord"
          ]
        ]
      ],
      [
        "Swap",
        "void",
        [
          [
            "n",
            "int"
          ]
        ]
      ],
      [
        "Dup",
        "void",
        [
          [
            "n",
            "int"
          ]
        ]
      ],
      [
        "Compile",
        "void",
        [
          [
            "bytecode",
            "Bytecodes"
          ],
          [
            "args",
            "byte[]"
          ]
        ]
      ],
      [
        "CompileAdjust",
        "void",
        [
          [
            "bytecode",
            "Bytecodes"
          ],
          [
            "adjust",
            "int"
          ],
          [
            "args",
            "byte[]"
          ]
        ]
      ],
      [
        "ToBytes",
        "byte[]",
        []
      ]
    ],
    "relationships": [
      [
        "IList<byte>",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "Bytecodes",
    "type": "enum",
    "namespace": "BlockchainSharp.Vm",
    "bases": [],
    "attributes": [
      [
        "Stop",
        "0x00"
      ],
      [
        "Add",
        "0x01"
      ],
      [
        "Multiply",
        "0x02"
      ],
      [
        "Subtract",
        "0x03"
      ],
      [
        "Divide",
        "0x04"
      ],
      [
        "LessThan",
        "0x10"
      ],
      [
        "GreaterThan",
        "0x11"
      ],
      [
        "Equal",
        "0x14"
      ],
      [
        "IsZero",
        "0x15"
      ],
      [
        "And",
        "0x16"
      ],
      [
        "Or",
        "0x17"
      ],
      [
        "Xor",
        "0x18"
      ],
      [
        "Not",
        "0x19"
      ],
      [
        "Address",
        "0x30"
      ],
      [
        "Origin",
        "0x32"
      ],
      [
        "Caller",
        "0x33"
      ],
      [
        "Coinbase",
        "0x41"
      ],
      [
        "Pop",
        "0x50"
      ],
      [
        "MLoad",
        "0x51"
      ],
      [
        "MStore",
        "0x52"
      ],
      [
        "MStore8",
        "0x53"
      ],
      [
        "SLoad",
        "0x54"
      ],
      [
        "SStore",
        "0x55"
      ],
      [
        "Jump",
        "0x56"
      ],
      [
        "JumpI",
        "0x57"
      ],
      [
        "Pc",
        "0x58"
      ],
      [
        "JumpDest",
        "0x5b"
      ],
      [
        "Push1",
        "0x60"
      ],
      [
        "Push2",
        "0x61"
      ],
      [
        "Push3",
        "0x62"
      ],
      [
        "Push4",
        "0x63"
      ],
      [
        "Push5",
        "0x64"
      ],
      [
        "Push6",
        "0x65"
      ],
      [
        "Push7",
        "0x66"
      ],
      [
        "Push8",
        "0x67"
      ],
      [
        "Push9",
        "0x68"
      ],
      [
        "Push10",
        "0x69"
      ],
      [
        "Push11",
        "0x6a"
      ],
      [
        "Push12",
        "0x6b"
      ],
      [
        "Push13",
        "0x6c"
      ],
      [
        "Push14",
        "0x6d"
      ],
      [
        "Push15",
        "0x6e"
      ],
      [
        "Push16",
        "0x6f"
      ],
      [
        "Push17",
        "0x70"
      ],
      [
        "Push18",
        "0x71"
      ],
      [
        "Push19",
        "0x72"
      ],
      [
        "Push20",
        "0x73"
      ],
      [
        "Push21",
        "0x74"
      ],
      [
        "Push22",
        "0x75"
      ],
      [
        "Push23",
        "0x76"
      ],
      [
        "Push24",
        "0x77"
      ],
      [
        "Push25",
        "0x78"
      ],
      [
        "Push26",
        "0x79"
      ],
      [
        "Push27",
        "0x7a"
      ],
      [
        "Push28",
        "0x7b"
      ],
      [
        "Push29",
        "0x7c"
      ],
      [
        "Push30",
        "0x7d"
      ],
      [
        "Push31",
        "0x7e"
      ],
      [
        "Push32",
        "0x7f"
      ],
      [
        "Dup1",
        "0x80"
      ],
      [
        "Dup2",
        "0x81"
      ],
      [
        "Dup3",
        "0x82"
      ],
      [
        "Dup4",
        "0x83"
      ],
      [
        "Dup5",
        "0x84"
      ],
      [
        "Dup6",
        "0x85"
      ],
      [
        "Dup7",
        "0x86"
      ],
      [
        "Dup8",
        "0x87"
      ],
      [
        "Dup9",
        "0x88"
      ],
      [
        "Dup10",
        "0x89"
      ],
      [
        "Dup11",
        "0x8a"
      ],
      [
        "Dup12",
        "0x8b"
      ],
      [
        "Dup13",
        "0x8c"
      ],
      [
        "Dup14",
        "0x8d"
      ],
      [
        "Dup15",
        "0x8e"
      ],
      [
        "Dup16",
        "0x8f"
      ],
      [
        "Swap1",
        "0x90"
      ],
      [
        "Swap2",
        "0x091"
      ],
      [
        "Swap3",
        "0x092"
      ],
      [
        "Swap4",
        "0x093"
      ],
      [
        "Swap5",
        "0x094"
      ],
      [
        "Swap6",
        "0x095"
      ],
      [
        "Swap7",
        "0x096"
      ],
      [
        "Swap8",
        "0x097"
      ],
      [
        "Swap9",
        "0x098"
      ],
      [
        "Swap10",
        "0x099"
      ],
      [
        "Swap11",
        "0x09a"
      ],
      [
        "Swap12",
        "0x09b"
      ],
      [
        "Swap13",
        "0x09c"
      ],
      [
        "Swap14",
        "0x09d"
      ],
      [
        "Swap15",
        "0x09e"
      ],
      [
        "Swap16",
        "0x09f"
      ]
    ],
    "operations": [],
    "relationships": []
  },
  {
    "name": "DataWord",
    "type": "class",
    "namespace": "BlockchainSharp.Vm",
    "bases": [],
    "attributes": [
      [
        "zero",
        "DataWord",
        "property"
      ],
      [
        "one",
        "DataWord",
        "property"
      ],
      [
        "two",
        "DataWord",
        "property"
      ],
      [
        "three",
        "DataWord",
        "property"
      ],
      [
        "data",
        "byte[]"
      ],
      [
        "bytes",
        "byte[]",
        "property"
      ],
      [
        "value",
        "BigInteger",
        "property"
      ]
    ],
    "operations": [
      [
        "Negate",
        "DataWord",
        []
      ],
      [
        "Add",
        "DataWord",
        [
          [
            "dw",
            "DataWord"
          ]
        ]
      ],
      [
        "Subtract",
        "DataWord",
        [
          [
            "dw",
            "DataWord"
          ]
        ]
      ],
      [
        "Multiply",
        "DataWord",
        [
          [
            "dw",
            "DataWord"
          ]
        ]
      ],
      [
        "Divide",
        "DataWord",
        [
          [
            "dw",
            "DataWord"
          ]
        ]
      ],
      [
        "And",
        "DataWord",
        [
          [
            "dw",
            "DataWord"
          ]
        ]
      ],
      [
        "Or",
        "DataWord",
        [
          [
            "dw",
            "DataWord"
          ]
        ]
      ],
      [
        "Xor",
        "DataWord",
        [
          [
            "dw",
            "DataWord"
          ]
        ]
      ],
      [
        "Not",
        "DataWord",
        []
      ],
      [
        "Compare",
        "int",
        [
          [
            "dw",
            "DataWord"
          ]
        ]
      ],
      [
        "GetHashCode",
        "int",
        []
      ],
      [
        "Equals",
        "bool",
        [
          [
            "obj",
            "object"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "DataWord",
        "association",
        "1",
        "1"
      ],
      [
        "DataWord",
        "association",
        "1",
        "1"
      ],
      [
        "DataWord",
        "association",
        "1",
        "1"
      ],
      [
        "DataWord",
        "association",
        "1",
        "1"
      ],
      [
        "byte[]",
        "association",
        "1",
        "1"
      ],
      [
        "DataWord",
        "association",
        "1",
        "1"
      ],
      [
        "DataWord",
        "association",
        "1",
        "1"
      ],
      [
        "DataWord",
        "association",
        "1",
        "1"
      ],
      [
        "DataWord",
        "association",
        "1",
        "1"
      ],
      [
        "byte[]",
        "association",
        "1",
        "1"
      ],
      [
        "BigInteger",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "Machine",
    "type": "class",
    "namespace": "BlockchainSharp.Vm",
    "bases": [],
    "attributes": [
      [
        "stack",
        "Stack",
        "property"
      ],
      [
        "storage",
        "Storage"
      ],
      [
        "memory",
        "Memory",
        "property"
      ],
      [
        "programEnvironment",
        "ProgramEnvironment"
      ]
    ],
    "operations": [
      [
        "Execute",
        "void",
        [
          [
            "bytecodes",
            "byte[]"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "Stack",
        "association",
        "1",
        "1"
      ],
      [
        "Storage",
        "association",
        "1",
        "1"
      ],
      [
        "Memory",
        "association",
        "1",
        "1"
      ],
      [
        "ProgramEnvironment",
        "association",
        "1",
        "1"
      ],
      [
        "Stack",
        "association",
        "1",
        "1"
      ],
      [
        "Memory",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "Memory",
    "type": "class",
    "namespace": "BlockchainSharp.Vm",
    "bases": [],
    "attributes": [
      [
        "blocksize",
        "BigInteger"
      ],
      [
        "blocks",
        "IDictionary<BigInteger, byte[]>"
      ]
    ],
    "operations": [
      [
        "GetDataWord",
        "DataWord",
        [
          [
            "address",
            "DataWord"
          ]
        ]
      ],
      [
        "PutBytes",
        "void",
        [
          [
            "address",
            "DataWord"
          ],
          [
            "values",
            "byte[]"
          ]
        ]
      ],
      [
        "GetByte",
        "byte",
        [
          [
            "address",
            "DataWord"
          ]
        ]
      ],
      [
        "PutByte",
        "void",
        [
          [
            "address",
            "DataWord"
          ],
          [
            "value",
            "byte"
          ]
        ]
      ],
      [
        "GetBlock",
        "byte[]",
        [
          [
            "address",
            "DataWord"
          ],
          [
            "offset",
            "int"
          ]
        ]
      ],
      [
        "GetOrCreateBlock",
        "byte[]",
        [
          [
            "address",
            "DataWord"
          ],
          [
            "offset",
            "int"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "BigInteger",
        "association",
        "1",
        "1"
      ],
      [
        "IDictionary<BigInteger, byte[]>",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "ProgramEnvironment",
    "type": "class",
    "namespace": "BlockchainSharp.Vm",
    "bases": [],
    "attributes": [
      [
        "address",
        "Address",
        "property"
      ],
      [
        "origin",
        "Address",
        "property"
      ],
      [
        "caller",
        "Address",
        "property"
      ],
      [
        "coinbase",
        "Address",
        "property"
      ]
    ],
    "operations": [
      [
        "Builder",
        "ProgramEnvironmentBuilder",
        []
      ]
    ],
    "relationships": [
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "Address",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "ProgramEnvironmentBuilder",
    "type": "class",
    "namespace": "BlockchainSharp.Vm",
    "bases": [],
    "attributes": [
      [
        "address",
        "Address"
      ],
      [
        "origin",
        "Address"
      ],
      [
        "caller",
        "Address"
      ],
      [
        "coinbase",
        "Address"
      ]
    ],
    "operations": [
      [
        "Address",
        "ProgramEnvironmentBuilder",
        [
          [
            "address",
            "Address"
          ]
        ]
      ],
      [
        "Origin",
        "ProgramEnvironmentBuilder",
        [
          [
            "origin",
            "Address"
          ]
        ]
      ],
      [
        "Caller",
        "ProgramEnvironmentBuilder",
        [
          [
            "caller",
            "Address"
          ]
        ]
      ],
      [
        "Coinbase",
        "ProgramEnvironmentBuilder",
        [
          [
            "coinbase",
            "Address"
          ]
        ]
      ],
      [
        "Build",
        "ProgramEnvironment",
        []
      ]
    ],
    "relationships": [
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "Address",
        "association",
        "1",
        "1"
      ],
      [
        "Address",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "Stack",
    "type": "class",
    "namespace": "BlockchainSharp.Vm",
    "bases": [],
    "attributes": [
      [
        "stack",
        "Stack<DataWord>"
      ],
      [
        "size",
        "int",
        "property"
      ]
    ],
    "operations": [
      [
        "Push",
        "void",
        [
          [
            "value",
            "DataWord"
          ]
        ]
      ],
      [
        "Top",
        "DataWord",
        []
      ],
      [
        "Pop",
        "DataWord",
        []
      ],
      [
        "ElementAt",
        "DataWord",
        [
          [
            "index",
            "int"
          ]
        ]
      ],
      [
        "Swap",
        "void",
        [
          [
            "position",
            "int"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "Stack<DataWord>",
        "association",
        "1",
        "1"
      ]
    ]
  },
  {
    "name": "Storage",
    "type": "class",
    "namespace": "BlockchainSharp.Vm",
    "bases": [],
    "attributes": [
      [
        "state",
        "IDictionary<DataWord, DataWord>"
      ]
    ],
    "operations": [
      [
        "Put",
        "void",
        [
          [
            "key",
            "DataWord"
          ],
          [
            "value",
            "DataWord"
          ]
        ]
      ],
      [
        "Get",
        "DataWord",
        [
          [
            "key",
            "DataWord"
          ]
        ]
      ]
    ],
    "relationships": [
      [
        "IDictionary<DataWord, DataWord>",
        "association",
        "1",
        "1"
      ]
    ]
  }
]